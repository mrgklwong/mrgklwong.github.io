{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hi, I'm Ka Lee Gary Wong I am a QA Architect Lead at Global Logic UK&I, London. A Little About Me I graduated with a degree in Computer Games, and since then I have accumulated 20 years of QA knowledge and industry experiences. I have a big fan of lofi, syncwave, retro gaming. I will always have a pair of ear buds or headphones on, listening to whichever wuxia or fantasy novel I have at the time. Like some I never had a goal in life. But my tao seems to be QA related. My Tao My Tao is to help create, plan and improve QA processes with a wide set of skills including programming, engineering resourcing, team budgeting and solution design for the team/business in question. I actively try to help and mentor more junior members within QA to improve and will either sponsor or direct in the right direction. And in turn I learn, grow and traverse my tao.","title":"Home"},{"location":"#hi-im-ka-lee-gary-wong","text":"I am a QA Architect Lead at Global Logic UK&I, London.","title":"Hi, I'm Ka Lee Gary Wong"},{"location":"#a-little-about-me","text":"I graduated with a degree in Computer Games, and since then I have accumulated 20 years of QA knowledge and industry experiences. I have a big fan of lofi, syncwave, retro gaming. I will always have a pair of ear buds or headphones on, listening to whichever wuxia or fantasy novel I have at the time. Like some I never had a goal in life. But my tao seems to be QA related.","title":"A Little About Me"},{"location":"#my-tao","text":"My Tao is to help create, plan and improve QA processes with a wide set of skills including programming, engineering resourcing, team budgeting and solution design for the team/business in question. I actively try to help and mentor more junior members within QA to improve and will either sponsor or direct in the right direction. And in turn I learn, grow and traverse my tao.","title":"My Tao"},{"location":"blog/","text":"TODO","title":"Blog Posts"},{"location":"blog/#todo","text":"","title":"TODO"},{"location":"frameworks/","text":"Frameworks and Projects Playwright Based Frameworks Playwright UI Testing framework TS Playwright API Testing framework TS","title":"Frameworks"},{"location":"frameworks/#frameworks-and-projects","text":"Playwright Based Frameworks Playwright UI Testing framework TS Playwright API Testing framework TS","title":"Frameworks and Projects"},{"location":"playwright-ts-api/","text":"TODO","title":"TODO"},{"location":"playwright-ts-api/#todo","text":"","title":"TODO"},{"location":"playwright-ts/","text":"Playwright TS UI Framework Developed by Microsoft, Playwright is a relatively new open source testing frameworks which has been gaining popularity since its release in Feb 2020. Although this page is focused on the TS UI side of the framework it handles much more, include accessibility, components and tracing. Playwright currently supports JS/TS, Java, Python and .Net In this page, I will demo the easy step of the framework Getting Started Download and install node for you OS Windows - Download the node from the node site https://nodejs.org/dist/v18.12.1/node-v18.12.1-x64.msi Mac (using homebrew) /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install node Create a new folder Inside the new folder install playwright npm init playwright@latest , follow the defaults prompts This will create the following files in the folder: playwright.config.ts package.json package-lock.json tests/ example.spec.ts tests-examples/ demo-todo-app.spec.ts And that's it! Or you can clone the example repo located here My Review The devs at playwright have done loads to make starting easy. In less than 4 steps a team can provide value with this new framework. The framework packed full of features including: Support of the latest browser Build in Video and Screenshot capture API testing and Mocking Authentication handling using sessions Test Generations for the lazy coder Accessibility Testing Support of POM design patten Built in retry, timeout and reporters. Ability to use selenium grid testing infra. So far the only downside of the framework I have noticed is the lack of backward browser compatibility. I might be able to find more. But I hope workarounds can be found. I will be exploring some of these features in other framework pages.","title":"Playwright TS UI Framework"},{"location":"playwright-ts/#playwright-ts-ui-framework","text":"Developed by Microsoft, Playwright is a relatively new open source testing frameworks which has been gaining popularity since its release in Feb 2020. Although this page is focused on the TS UI side of the framework it handles much more, include accessibility, components and tracing. Playwright currently supports JS/TS, Java, Python and .Net In this page, I will demo the easy step of the framework","title":"Playwright TS UI Framework"},{"location":"playwright-ts/#getting-started","text":"Download and install node for you OS Windows - Download the node from the node site https://nodejs.org/dist/v18.12.1/node-v18.12.1-x64.msi Mac (using homebrew) /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install node Create a new folder Inside the new folder install playwright npm init playwright@latest , follow the defaults prompts This will create the following files in the folder: playwright.config.ts package.json package-lock.json tests/ example.spec.ts tests-examples/ demo-todo-app.spec.ts And that's it! Or you can clone the example repo located here","title":"Getting Started"},{"location":"playwright-ts/#my-review","text":"The devs at playwright have done loads to make starting easy. In less than 4 steps a team can provide value with this new framework. The framework packed full of features including: Support of the latest browser Build in Video and Screenshot capture API testing and Mocking Authentication handling using sessions Test Generations for the lazy coder Accessibility Testing Support of POM design patten Built in retry, timeout and reporters. Ability to use selenium grid testing infra. So far the only downside of the framework I have noticed is the lack of backward browser compatibility. I might be able to find more. But I hope workarounds can be found. I will be exploring some of these features in other framework pages.","title":"My Review"}]}